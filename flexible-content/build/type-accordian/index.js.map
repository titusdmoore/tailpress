{"version":3,"file":"type-accordian/index.js","mappings":"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","sources":["webpack://tailpress/./flexible-content/src/type-accordian/edit.js","webpack://tailpress/./flexible-content/src/type-accordian/save.js","webpack://tailpress/external window [\"wp\",\"blockEditor\"]","webpack://tailpress/external window [\"wp\",\"blocks\"]","webpack://tailpress/external window [\"wp\",\"components\"]","webpack://tailpress/external window [\"wp\",\"element\"]","webpack://tailpress/webpack/bootstrap","webpack://tailpress/webpack/runtime/compat get default export","webpack://tailpress/webpack/runtime/define property getters","webpack://tailpress/webpack/runtime/hasOwnProperty shorthand","webpack://tailpress/webpack/runtime/make namespace object","webpack://tailpress/./flexible-content/src/type-accordian/index.js"],"sourcesContent":["/**\n * WordPress components that create the necessary UI elements for the block\n *\n * @see https://developer.wordpress.org/block-editor/packages/packages-components/\n */\nimport { TextControl } from '@wordpress/components';\n\n/**\n * React hook that is used to mark the block wrapper element.\n * It provides all the necessary props like the className name.\n *\n * @see https://developer.wordpress.org/block-editor/packages/packages-block-editor/#useBlockProps\n */\nimport { useBlockProps } from '@wordpress/block-editor';\n\n/**\n * The edit function describes the structure of your block in the context of the\n * editor. This represents what the editor will render when the block is used.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/block-edit-save/#edit\n *\n * @param {Object}   props               Properties passed to the function.\n * @param {Object}   props.attributes    Available block attributes.\n * @param {Function} props.setAttributes Function that updates individual attributes.\n *\n * @return {WPElement} Element to render.\n */\nexport default function Edit({ attributes, setAttributes }) {\n  const blockProps = useBlockProps();\n  return (\n    <div {...blockProps}>\n      <div className=\"accordion\" id=\"accordionExample\">\n        <div className=\"accordion-item bg-white border border-gray-200\">\n          <h2 className=\"accordion-header mb-0\" id=\"headingOne\">\n            <button className=\"\n        accordion-button\n        relative\n        flex\n        items-center\n        w-full\n        py-4\n        px-5\n        text-base text-gray-800 text-left\n        bg-white\n        border-0\n        rounded-none\n        transition\n        focus:outline-none\n      \" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\"\n              aria-controls=\"collapseOne\">\n              Accordion Item #1\n            </button>\n          </h2>\n          <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\"\n            data-bs-parent=\"#accordionExample\">\n            <div className=\"accordion-body py-4 px-5\">\n              <strong>This is the first item's accordion body.</strong> It is shown by default,\n              until the collapse plugin adds the appropriate classNamees that we use to style each\n              element. These classNamees control the overall appearance, as well as the showing and\n              hiding via CSS transitions. You can modify any of this with custom CSS or overriding\n              our default variables. It's also worth noting that just about any HTML can go within\n              the <code>.accordion-body</code>, though the transition does limit overflow.\n            </div>\n          </div>\n        </div>\n        <div className=\"accordion-item bg-white border border-gray-200\">\n          <h2 className=\"accordion-header mb-0\" id=\"headingTwo\">\n            <button className=\"\n        accordion-button\n        collapsed\n        relative\n        flex\n        items-center\n        w-full\n        py-4\n        px-5\n        text-base text-gray-800 text-left\n        bg-white\n        border-0\n        rounded-none\n        transition\n        focus:outline-none\n      \" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\"\n              aria-controls=\"collapseTwo\">\n              Accordion Item #2\n            </button>\n          </h2>\n          <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\"\n            data-bs-parent=\"#accordionExample\">\n            <div className=\"accordion-body py-4 px-5\">\n              <strong>This is the second item's accordion body.</strong> It is hidden by default,\n              until the collapse plugin adds the appropriate classNamees that we use to style each\n              element. These classNamees control the overall appearance, as well as the showing and\n              hiding via CSS transitions. You can modify any of this with custom CSS or overriding\n              our default variables. It's also worth noting that just about any HTML can go within\n              the <code>.accordion-body</code>, though the transition does limit overflow.\n            </div>\n          </div>\n        </div>\n        <div className=\"accordion-item bg-white border border-gray-200\">\n          <h2 className=\"accordion-header mb-0\" id=\"headingThree\">\n            <button className=\"\n        accordion-button\n        collapsed\n        relative\n        flex\n        items-center\n        w-full\n        py-4\n        px-5\n        text-base text-gray-800 text-left\n        bg-white\n        border-0\n        rounded-none\n        transition\n        focus:outline-none\n      \" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\"\n              aria-controls=\"collapseThree\">\n              Accordion Item #3\n            </button>\n          </h2>\n          <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\"\n            data-bs-parent=\"#accordionExample\">\n            <div className=\"accordion-body py-4 px-5\">\n              <strong>This is the third item's accordion body.</strong> It is hidden by default,\n              until the collapse plugin adds the appropriate classNamees that we use to style each\n              element. These classNamees control the overall appearance, as well as the showing and\n              hiding via CSS transitions. You can modify any of this with custom CSS or overriding\n              our default variables. It's also worth noting that just about any HTML can go within\n              the <code>.accordion-body</code>, though the transition does limit overflow.\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/**\n * React hook that is used to mark the block wrapper element.\n * It provides all the necessary props like the class name.\n *\n * @see https://developer.wordpress.org/block-editor/packages/packages-block-editor/#useBlockProps\n */\nimport { useBlockProps } from '@wordpress/block-editor';\n\n/**\n * The save function defines the way in which the different attributes should\n * be combined into the final markup, which is then serialized by the block\n * editor into `post_content`.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/block-edit-save/#save\n *\n * @param {Object} props            Properties passed to the function.\n * @param {Object} props.attributes Available block attributes.\n * @return {WPElement} Element to render.\n */\nexport default function save({ attributes }) {\n  const blockProps = useBlockProps.save();\n  return <div {...blockProps}>\n    <div className=\"accordion\" id=\"accordionExample\">\n      <div className=\"accordion-item bg-white border border-gray-200\">\n        <h2 className=\"accordion-header mb-0\" id=\"headingOne\">\n          <button className=\"\n        accordion-button\n        relative\n        flex\n        items-center\n        w-full\n        py-4\n        px-5\n        text-base text-gray-800 text-left\n        bg-white\n        border-0\n        rounded-none\n        transition\n        focus:outline-none\n      \" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\"\n            aria-controls=\"collapseOne\">\n            Accordion Item #1\n          </button>\n        </h2>\n        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\"\n          data-bs-parent=\"#accordionExample\">\n          <div className=\"accordion-body py-4 px-5\">\n            <strong>This is the first item's accordion body.</strong> It is shown by default,\n            until the collapse plugin adds the appropriate classNamees that we use to style each\n            element. These classNamees control the overall appearance, as well as the showing and\n            hiding via CSS transitions. You can modify any of this with custom CSS or overriding\n            our default variables. It's also worth noting that just about any HTML can go within\n            the <code>.accordion-body</code>, though the transition does limit overflow.\n          </div>\n        </div>\n      </div>\n      <div className=\"accordion-item bg-white border border-gray-200\">\n        <h2 className=\"accordion-header mb-0\" id=\"headingTwo\">\n          <button className=\"\n        accordion-button\n        collapsed\n        relative\n        flex\n        items-center\n        w-full\n        py-4\n        px-5\n        text-base text-gray-800 text-left\n        bg-white\n        border-0\n        rounded-none\n        transition\n        focus:outline-none\n      \" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\"\n            aria-controls=\"collapseTwo\">\n            Accordion Item #2\n          </button>\n        </h2>\n        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\"\n          data-bs-parent=\"#accordionExample\">\n          <div className=\"accordion-body py-4 px-5\">\n            <strong>This is the second item's accordion body.</strong> It is hidden by default,\n            until the collapse plugin adds the appropriate classNamees that we use to style each\n            element. These classNamees control the overall appearance, as well as the showing and\n            hiding via CSS transitions. You can modify any of this with custom CSS or overriding\n            our default variables. It's also worth noting that just about any HTML can go within\n            the <code>.accordion-body</code>, though the transition does limit overflow.\n          </div>\n        </div>\n      </div>\n      <div className=\"accordion-item bg-white border border-gray-200\">\n        <h2 className=\"accordion-header mb-0\" id=\"headingThree\">\n          <button className=\"\n        accordion-button\n        collapsed\n        relative\n        flex\n        items-center\n        w-full\n        py-4\n        px-5\n        text-base text-gray-800 text-left\n        bg-white\n        border-0\n        rounded-none\n        transition\n        focus:outline-none\n      \" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\"\n            aria-controls=\"collapseThree\">\n            Accordion Item #3\n          </button>\n        </h2>\n        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\"\n          data-bs-parent=\"#accordionExample\">\n          <div className=\"accordion-body py-4 px-5\">\n            <strong>This is the third item's accordion body.</strong> It is hidden by default,\n            until the collapse plugin adds the appropriate classNamees that we use to style each\n            element. These classNamees control the overall appearance, as well as the showing and\n            hiding via CSS transitions. You can modify any of this with custom CSS or overriding\n            our default variables. It's also worth noting that just about any HTML can go within\n            the <code>.accordion-body</code>, though the transition does limit overflow.\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>;\n}\n","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"element\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Registers a new block provided a unique name and an object defining its behavior.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/#registering-a-block\n */\n import { registerBlockType } from '@wordpress/blocks';\n \n /**\n  * Internal dependencies\n  */\n import Edit from './edit';\n import save from './save';\n import metadata from './block.json';\n \n /**\n  * Every block starts by registering a new block type definition.\n  *\n  * @see https://developer.wordpress.org/block-editor/developers/block-api/#registering-a-block\n  */\n registerBlockType( metadata.name, {\n   /**\n    * Used to construct a preview for the block to be shown in the block inserter.\n    */\n   example: {\n     attributes: {\n       message: 'Edgepress Accordian',\n     },\n   },\n   /**\n    * @see ./edit.js\n    */\n   edit: Edit,\n   /**\n    * @see ./save.js\n    */\n   save,\n } );\n "],"names":["TextControl","useBlockProps","Edit","attributes","setAttributes","blockProps","save","registerBlockType","metadata","name","example","message","edit"],"sourceRoot":""}