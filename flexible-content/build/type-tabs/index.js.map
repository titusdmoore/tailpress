{"version":3,"file":"type-tabs/index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;CAEA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACe,SAASK,IAAT,OAA6C;EAAA,IAA/B;IAAEC,UAAF;IAAcC;EAAd,CAA+B;EAC1D,MAAMC,UAAU,GAAGN,sEAAa,CAAC;IAC/BO,SAAS,EAAE;EADoB,CAAD,CAAhC;EAIA,MAAM;IAAEC;EAAF,IAAWJ,UAAjB;EAEA,MAAM,CAAEK,WAAF,EAAeC,cAAf,IAAkCT,4DAAQ,CAAC,EAAD,CAAhD;EAEA,OACE,yEAASK,UAAT,EACE;IAAI,SAAS,EAAC;EAAd,GACGE,IAAI,GAAGA,IAAI,CAACG,GAAL,CAAUC,GAAD,IAAS;IACxB,OACE;MAAI,SAAS,EAAC;IAAd,GAAkDA,GAAlD,CADF;EAGD,CAJO,CAAH,GAIA,IALP,CADF,EAQE;IAAO,IAAI,EAAC,MAAZ;IAAmB,KAAK,EAAEH,WAA1B;IAAuC,QAAQ,EAAGI,CAAD,IAAO;MACtDH,cAAc,CAACG,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;IACD;EAFD,EARF,EAWE;IAAQ,OAAO,EAAE,MAAM;MACrB,IAAIC,OAAO,GAAGR,IAAI,GAAGA,IAAI,CAACS,MAAL,CAAYR,WAAZ,CAAH,GAA8B,CAAEA,WAAF,CAAhD;MACAC,cAAc,CAAC,EAAD,CAAd;MAEAL,aAAa,CAAC;QACZG,IAAI,EAAEQ;MADM,CAAD,CAAb;IAGD;EAPD,iBAXF,CADF;AAsBD;;;;;;;;;;;;;;;;;;;;ACpED;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACe,SAASE,IAAT,OAA8B;EAAA,IAAhB;IAAEd;EAAF,CAAgB;EAC3C,MAAME,UAAU,GAAGN,uEAAA,EAAnB;EACA,OACE,yEAASM,UAAT,EACE,8EACE;IAAI,SAAS,EAAC;EAAd,qBADF,CADF,CADF;AAOD;;;;;;;;;;AC5BD;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACC;AAEA;AACD;AACA;;AACC;AACA;AACA;AAEA;AACD;AACA;AACA;AACA;;AACCa,oEAAiB,CAAEC,6CAAF,EAAiB;EAChC;AACH;AACA;EACGE,OAAO,EAAE;IACPlB,UAAU,EAAE;EADL,CAJuB;;EAQhC;AACH;AACA;EACGmB,IAAI,EAAEpB,6CAX0B;;EAYhC;AACH;AACA;EACGe,IAAIA,+CAAAA;AAf4B,CAAjB,CAAjB,C","sources":["webpack://tailpress/./flexible-content/src/type-tabs/edit.js","webpack://tailpress/./flexible-content/src/type-tabs/save.js","webpack://tailpress/external window \"React\"","webpack://tailpress/external window [\"wp\",\"blockEditor\"]","webpack://tailpress/external window [\"wp\",\"blocks\"]","webpack://tailpress/external window [\"wp\",\"components\"]","webpack://tailpress/external window [\"wp\",\"element\"]","webpack://tailpress/webpack/bootstrap","webpack://tailpress/webpack/runtime/compat get default export","webpack://tailpress/webpack/runtime/define property getters","webpack://tailpress/webpack/runtime/hasOwnProperty shorthand","webpack://tailpress/webpack/runtime/make namespace object","webpack://tailpress/./flexible-content/src/type-tabs/index.js"],"sourcesContent":["/**\n * WordPress components that create the necessary UI elements for the block\n *\n * @see https://developer.wordpress.org/block-editor/packages/packages-components/\n */\nimport { TextControl } from '@wordpress/components';\n// import { __experimentalInputControl as InputControl } from '@wordpress/components';\nimport { InnerBlocks } from '@wordpress/block-editor';\n\n/**\n * React hook that is used to mark the block wrapper element.\n * It provides all the necessary props like the className name.\n *\n * @see https://developer.wordpress.org/block-editor/packages/packages-block-editor/#useBlockProps\n */\nimport { useBlockProps } from '@wordpress/block-editor';\n\n/**\n * Import hooks from element\n * \n */\nimport { useState } from '@wordpress/element';\nimport { useEffect } from 'react';\n\n\n/**\n * The edit function describes the structure of your block in the context of the\n * editor. This represents what the editor will render when the block is used.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/block-edit-save/#edit\n *\n * @param {Object}   props               Properties passed to the function.\n * @param {Object}   props.attributes    Available block attributes.\n * @param {Function} props.setAttributes Function that updates individual attributes.\n *\n * @return {WPElement} Element to render.\n */\nexport default function Edit({ attributes, setAttributes }) {\n  const blockProps = useBlockProps({\n    className: 'border border-sky-500'\n  });\n\n  const { tabs } = attributes;\n\n  const [ newListItem, setNewListItem ] = useState(\"\");\n\n  return (\n    <div {...blockProps}>\n      <ul className='flex flex-row pl-0'>\n        {tabs ? tabs.map((tab) => {\n          return (\n            <li className='list-none px-4 bg-slate-400 mr-2'>{tab}</li>\n          )\n        }) : null}\n      </ul>\n      <input type=\"text\" value={newListItem} onChange={(e) => {\n        setNewListItem(e.target.value)\n      }} />\n      <button onClick={() => {\n        let newTabs = tabs ? tabs.concat(newListItem) : [ newListItem ];\n        setNewListItem(\"\");\n\n        setAttributes({\n          tabs: newTabs\n        })\n      }}>Add Element</button>\n    </div>\n  );\n}\n","/**\n * React hook that is used to mark the block wrapper element.\n * It provides all the necessary props like the class name.\n *\n * @see https://developer.wordpress.org/block-editor/packages/packages-block-editor/#useBlockProps\n */\nimport { useBlockProps } from '@wordpress/block-editor';\n\n/**\n * The save function defines the way in which the different attributes should\n * be combined into the final markup, which is then serialized by the block\n * editor into `post_content`.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/block-edit-save/#save\n *\n * @param {Object} props            Properties passed to the function.\n * @param {Object} props.attributes Available block attributes.\n * @return {WPElement} Element to render.\n */\nexport default function save({ attributes }) {\n  const blockProps = useBlockProps.save();\n  return (\n    <div {...blockProps}>\n      <ul>\n        <li className='tab-label'>This is awesome</li>\n      </ul>\n    </div>\n  );\n}\n","module.exports = window[\"React\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"element\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Registers a new block provided a unique name and an object defining its behavior.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/#registering-a-block\n */\n import { registerBlockType } from '@wordpress/blocks';\n \n /**\n  * Internal dependencies\n  */\n import Edit from './edit';\n import save from './save';\n import metadata from './block.json';\n \n /**\n  * Every block starts by registering a new block type definition.\n  *\n  * @see https://developer.wordpress.org/block-editor/developers/block-api/#registering-a-block\n  */\n registerBlockType( metadata.name, {\n   /**\n    * Used to construct a preview for the block to be shown in the block inserter.\n    */\n   example: {\n     attributes: {\n     },\n   },\n   /**\n    * @see ./edit.js\n    */\n   edit: Edit,\n   /**\n    * @see ./save.js\n    */\n   save,\n } );\n "],"names":["TextControl","InnerBlocks","useBlockProps","useState","useEffect","Edit","attributes","setAttributes","blockProps","className","tabs","newListItem","setNewListItem","map","tab","e","target","value","newTabs","concat","save","registerBlockType","metadata","name","example","edit"],"sourceRoot":""}